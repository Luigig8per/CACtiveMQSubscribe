//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CACtiveMQSubscribe
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DonBestEntities2 : DbContext
    {
        public DonBestEntities2()
            : base("name=DonBestEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<line> lines { get; set; }
        public virtual DbSet<matchup_score_event_id> matchup_score_event_id { get; set; }
        public virtual DbSet<view_all_line> view_all_line { get; set; }
    
        public virtual ObjectResult<getAllLines_Result> getAllLines()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllLines_Result>("getAllLines");
        }
    
        public virtual int NewInsertCommand(Nullable<int> rot, Nullable<System.DateTime> timestamp, Nullable<int> period_id, string period, Nullable<int> event_id, Nullable<short> sportsbook, string description, Nullable<int> league_id, Nullable<int> sport_id, Nullable<int> away_team_id, Nullable<int> home_team_id, Nullable<float> away_spread, Nullable<int> away_price, Nullable<float> home_spread, Nullable<int> home_price, Nullable<int> draw_price, Nullable<System.DateTime> date, Nullable<int> home_rot, Nullable<float> total_total, Nullable<int> over_price, Nullable<int> under_price)
        {
            var rotParameter = rot.HasValue ?
                new ObjectParameter("rot", rot) :
                new ObjectParameter("rot", typeof(int));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(System.DateTime));
    
            var period_idParameter = period_id.HasValue ?
                new ObjectParameter("period_id", period_id) :
                new ObjectParameter("period_id", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(string));
    
            var event_idParameter = event_id.HasValue ?
                new ObjectParameter("event_id", event_id) :
                new ObjectParameter("event_id", typeof(int));
    
            var sportsbookParameter = sportsbook.HasValue ?
                new ObjectParameter("sportsbook", sportsbook) :
                new ObjectParameter("sportsbook", typeof(short));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var league_idParameter = league_id.HasValue ?
                new ObjectParameter("league_id", league_id) :
                new ObjectParameter("league_id", typeof(int));
    
            var sport_idParameter = sport_id.HasValue ?
                new ObjectParameter("sport_id", sport_id) :
                new ObjectParameter("sport_id", typeof(int));
    
            var away_team_idParameter = away_team_id.HasValue ?
                new ObjectParameter("away_team_id", away_team_id) :
                new ObjectParameter("away_team_id", typeof(int));
    
            var home_team_idParameter = home_team_id.HasValue ?
                new ObjectParameter("home_team_id", home_team_id) :
                new ObjectParameter("home_team_id", typeof(int));
    
            var away_spreadParameter = away_spread.HasValue ?
                new ObjectParameter("away_spread", away_spread) :
                new ObjectParameter("away_spread", typeof(float));
    
            var away_priceParameter = away_price.HasValue ?
                new ObjectParameter("away_price", away_price) :
                new ObjectParameter("away_price", typeof(int));
    
            var home_spreadParameter = home_spread.HasValue ?
                new ObjectParameter("home_spread", home_spread) :
                new ObjectParameter("home_spread", typeof(float));
    
            var home_priceParameter = home_price.HasValue ?
                new ObjectParameter("home_price", home_price) :
                new ObjectParameter("home_price", typeof(int));
    
            var draw_priceParameter = draw_price.HasValue ?
                new ObjectParameter("draw_price", draw_price) :
                new ObjectParameter("draw_price", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var home_rotParameter = home_rot.HasValue ?
                new ObjectParameter("home_rot", home_rot) :
                new ObjectParameter("home_rot", typeof(int));
    
            var total_totalParameter = total_total.HasValue ?
                new ObjectParameter("total_total", total_total) :
                new ObjectParameter("total_total", typeof(float));
    
            var over_priceParameter = over_price.HasValue ?
                new ObjectParameter("over_price", over_price) :
                new ObjectParameter("over_price", typeof(int));
    
            var under_priceParameter = under_price.HasValue ?
                new ObjectParameter("under_price", under_price) :
                new ObjectParameter("under_price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewInsertCommand", rotParameter, timestampParameter, period_idParameter, periodParameter, event_idParameter, sportsbookParameter, descriptionParameter, league_idParameter, sport_idParameter, away_team_idParameter, home_team_idParameter, away_spreadParameter, away_priceParameter, home_spreadParameter, home_priceParameter, draw_priceParameter, dateParameter, home_rotParameter, total_totalParameter, over_priceParameter, under_priceParameter);
        }
    
        public virtual ObjectResult<NewSelectCommand_Result> NewSelectCommand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewSelectCommand_Result>("NewSelectCommand");
        }
    }
}
